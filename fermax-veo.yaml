substitutions:
  device_name: fermax-veo
  wifi_signal_max: "-15.0"

esphome:
  name: ${device_name}
  platformio_options:
    board_build.f_cpu: 80000000L

esp32:
  board: lolin_c3_mini
  variant: esp32c3
  framework:
    type: arduino
    version: 2.0.9
    platform_version: 6.3.0

wifi:
  domain: ".lan"
  output_power: 8.5
  reboot_timeout: 60min
  ap:
    ssid: ${device_name}
    password: !secret wifi_ap_pass
  networks:
    - ssid: !secret wifi_aux_ssid
      password: !secret wifi_aux_pass
    - ssid: !secret wifi_ssid
      password: !secret wifi_pass

captive_portal:

logger:
  baud_rate: 0

api:
  reboot_timeout: 60min
  encryption:
    key: !secret api_key

ota:
  password: !secret api_pass

status_led:
  pin:
    number: GPIO7

web_server:
  port: 80
  auth:
    username: admin
    password: !secret api_pass

binary_sensor:
  - platform: analog_threshold
    name: "${device_name} Intercom"
    sensor_id: adc3
    threshold: 2.4
    filters:
      - delayed_off: 3s

button:
  - platform: restart
    name: "${device_name} Restart"

  - platform: output
    name: "${device_name} Open"
    output: output_open
    duration: 100ms

output:
  - platform: gpio
    pin: GPIO4
    id: output_open

sensor:
  - platform: uptime
    name: "${device_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 60s
    filters:
      - lambda: |-
          if (x <= ${wifi_signal_max}) {
            return x;
          } else {
            return {};
          }

  - platform: internal_temperature
    name: "${device_name} SoC Temperature"
    update_interval: 60s

  - platform: template
    name: "${device_name} Temperature"
    update_interval: 60s
    id: temp
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    lambda: return temperatureRead();

  - platform: adc
    name: "${device_name} ADC"
    id: adc3
    update_interval: 0ms
    accuracy_decimals: 2
    pin: GPIO3
    attenuation: 11db
    filters:
      - multiply: 3.2
      - delta: 0.1

text_sensor:
  - platform: template
    name: "${device_name} Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Madrid"
    servers:
      - 192.168.1.1
      - hora.rediris.es
      - es.pool.ntp.org
