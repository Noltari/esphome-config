substitutions:
  device_name: nodemcu32s

esphome:
  name: ${device_name}
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  domain: ".lan"
  reboot_timeout: 60min
  ap:
    ssid: ${device_name}
    password: !secret wifi_ap_pass

captive_portal:

logger:
  baud_rate: 0

api:
  reboot_timeout: 60min
  password: !secret api_pass

ota:
  password: !secret api_pass

web_server:
  port: 80
  auth:
    username: admin
    password: !secret api_pass

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: False

sensor:
  - platform: uptime
    name: "${device_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 300s

  - platform: bme280
    temperature:
      name: "${device_name} Temperature"
      id: bme280_temperature
      oversampling: 16x
    pressure:
      name: "${device_name} Pressure"
      id: bme280_pressure
    humidity:
      name: "${device_name} Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 60s

  - platform: template
    name: "${device_name} Sea Level Pressure"
    lambda: |-
      const float STANDARD_ALTITUDE = 634.0; // in meters, see note
      return id(bme280_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(bme280_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s
    unit_of_measurement: "hPa"

  - platform: template
    name: "${device_name} Absolute Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 15s
    icon: "mdi:water"
    unit_of_measurement: "g/m³"

  - platform: template
    name: "${device_name} Dew Point"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
        (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
        ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    icon: "mdi:thermometer-alert"

text_sensor:
  - platform: template
    name: "${device_name} Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start
